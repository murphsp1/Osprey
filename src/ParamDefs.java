/** 
 
 */ 

import java.io.Serializable;
import java.util.*;

public class ParamDefs  {
   private HashMap paramsMap = null; 
   
   ParamDefs(){
      paramsMap = this.setParamDefs(); 
      }
   
   public HashMap setParamDefs(){
      HashMap outMap = new HashMap();
      
      String runName = "The file in which partial results are stored. The format of this file is described in detail in Sec. 5.1.2. This parameter is required."; 
      outMap.put("runName", runName); 
      
      String numMaxMut = "The maximum number of mutations from the wildtype, such that any solution generated by the algorithm will contain not more than numMaxMut mutations. By default a very large number, 10000, is used here. If you wish to limit the number of simultaneous mutations to, for example, two residue positions, then set a 2 here.";
      outMap.put("numMaxMut", numMaxMut);
      
      String algOption = "Determines the types of DEE criteria applied: 2-split positions DEE is used for algOption>=2, while DEE pairs pruning is applied for algOption>=3. The other DEE criteria (Bounds, simple Goldstein, 1-split position DEE) are used for any value of algOption. See [13] for a review of the different DEE pruning criteria. By default, a value of 3 is used.";
      outMap.put("algOption",algOption);    
            
      String imindee = "If continuous side-chain minimization is used, the iMinDEE algorithm can dramatically increase the amount of pruning that is performed before the A* conformational search. In design problems where the size of the conformational space is large, this can be critical [10]. By default it is false. Set to true to use it"; 
      outMap.put("imindee",imindee);    
   
      String ival	= "iMinDEE performs a “greedy” round of pruning on its first iteration that depends on an initial tight pruning value. We have performed many effective tests with a value of 0.5 for ival. This pruning value is called I0 in [10], where it is thoroughly explained."; 
      outMap.put("ival",ival);    
      
      String doDACS =" Determines if the algorithms should use DACS or not. If false, then DACS is not per- formed after the initial DEE pruning and the program directly proceeds to a single-processor A∗ conformation enumeration; otherwise, DACS splitting is performed. By default it is set to false"; 
      outMap.put("doDACS",doDACS );    
      
      String splitFlags = "Is the split-flags technique used? See [13] for a review of this pruning algorithm. By default it is set to true."; 
      outMap.put("splitFlags",splitFlags );    
      
      String distrDACS = "Will the DACS run be distributed? If true, then each DACS partition is distributed to a separate processor for evaluation. If there are more partitions than processors, a queue is formed and the distribution continues until there are no remaining partitions in the queue. If distrDACS is false, the DACS partitions are evaluated sequentially on a single processor. By default it is set to false.";
      outMap.put("distrDACS", distrDACS);    
      
      String doMinimize = "Determines if energy minimization is to be performed; true if energy minimization is performed (for Brdee, BD, MinDEE); false otherwise (for traditional DEE). By default it is set to false"; 
      outMap.put("doMinimize", doMinimize);    
      
      String minimizeBB = "Determines if backbone energy minimization is to be performed; true if backbone en- ergy minimization is performed (for BD and Brdee); false otherwise (for MinDEE). This parameter is taken into account only if doMinimize is true. By default it is set to false";
      outMap.put("minimizeBB",minimizeBB );    
      
      String doBackrubs = "Determines if backrubs are to be performed; true if backrubs are performed (for Brdee); false otherwise (for BD). This parameter is taken into account only if minimizeBB is true. By default it is set to false"; 
      outMap.put("doBackrubs",doBackrubs );
      
      String backrubFile= "The input file that contains the precomputed allowed backrub sets (this is the output file from the precomputeBackrubs command described in Sec. 5.1.3). This parameter is taken into account only if doBackrubs is true."; 
      outMap.put("backrubFile",backrubFile );   
      
      String minEnergyMatrixName = "The precomputed lower-/upper-bound pairwise energy matrix file names. For tradi- tional DEE, where no minimization is performed, only the min matrix is computed and stored. These matrices are described in detail in Sec. 5.1.2. As of version 2.0 this parameter has a default value based on the runName. It is therefore recommended that the user not change it.";  
      outMap.put("minEnergyMatrixName",minEnergyMatrixName );   
      
      String useEref = "Determines if amino acid reference energies are used as part of the energy function. The amino acid reference energies are computed using the lowest computed intra-rotamer energy for each amino acid type among all flexible residue positions (similarly to [20]). By default this is set to true."; 
      outMap.put("useEref", useEref);   
      
      String initEw = "The Ew value [14] used to guarantee that no conformations having an energy within Ew of the energy of the GMEC are pruned by the DEE algorithms. The value of initEw is also used as a halting condition to determine the set of conformations generated by A∗. If initEw  is set to zero, then the only conformation that is guaranteed not to be pruned is the GMEC. Larger values of initEw can generate a gap-free list of multiple low-energy conformations and mutation sequences. By default this is set to 0."; 
      outMap.put("initEw",initEw );   
      
      String pruningE = "Conformations with an energy lower bound greater than this value are pruned. This parameter is used by the MinBounds algorithm [13]. A value for this parameter can be generated using the doSinglePartFn command (Sec. 5.2) and setting pruningE to be the energy of the lowest-energy conformation for the wildtype protein sequence. If the value of pruningE is not obtained through doSinglePartFn, then pruningE can be conservatively set to a reasonably large value (e.g., 50-100 kcal/mol), so that conformations with high energy bounds are pruned. By default this is set to 100.0."; 
      outMap.put("pruningE",pruningE );   
      
     // String 
      //outMap.put("", );   
      
      return outMap;
      } // end setParamDefs
   
   public void dump(){
	   HashMap pMap = this.paramsMap; 
	   Set paramNames = pMap.entrySet();
	   Iterator iter = paramNames.iterator();
	   System.out.println("\n*******************Parameter Definitions ****************\n"); 
	   while(iter.hasNext()){
		   Map.Entry me = (Map.Entry) iter.next(); 
		   System.out.print(me.getKey() + ": ");
		   System.out.println(me.getValue() + "\n"); 
	   }
      System.out.println("\n************************************** ****************\n"); 
   }
}